{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "identifying prefix for all VM's being build. e.g WeProd would become WeProd-VM-CGF (Max 19 char, no spaces, [A-Za-z0-9]"
      },
      "defaultValue": "CUDA"
    },
    "vNetResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Name of the Resource Group of the VNET (e.g. CUDA-RG-VNET)"
      }
    },
    "vNetName": {
      "type": "string",
      "metadata": {
        "description": "Name of the VNET (e.g. cuda-vnet)"
      }
    },
    "subnetNameCGF": {
      "type": "string",
      "metadata": {
        "description": "Name of the Subnet containing the CloudGen Firewall (e.g. cuda-subnet-cgf)"
      }
    },
    "subnetCGF": {
      "type": "string",
      "metadata": {
        "description": "Network range of the Subnet containing the CloudGen Firewall (e.g. 172.16.136.0/24)"
      }
    },
    "InternalLBPrivateIP": {
      "type": "string",
      "metadata": {
        "description": "Private IP address of the internal load balancer (e.g. 172.16.136.10)"
      }
    },
    "PrimaryCGFPrivateIP": {
      "type": "string",
      "metadata": {
        "description": "Private IP address of the primary CG Firewall (e.g. 172.16.136.11)"
      }
    },
    "SecondaryCGFPrivateIP": {
      "type": "string",
      "metadata": {
        "description": "Private IP address of the secondary CG Firewall (e.g. 172.16.136.12)"
      }
    },
    "imageSKU": {
      "type": "string",
      "metadata": {
        "description": "SKU Hourly (PAYG) or BYOL (Bring your own license)"
      },
      "allowedValues": [
        "hourly",
        "byol"
      ],
      "defaultValue": "byol"
    },
    "version": {
      "type": "string",
      "metadata": {
        "description": "Version of the Barracuda CloudGen Firewall to install"
      },
      "allowedValues": [ "latest", "8.0.2011901", "8.0.1037602", "8.0.0047504", "7.2.5013201" ],
      "defaultValue": "latest"
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Size of the VMs to be created"
      },
      "allowedValues": [ "Standard_DS1_v2", "Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_D2_v3", "Standard_D4_v3", "Standard_D8_v3", "Standard_D2S_v3", "Standard_D4S_v3", "Standard_D8S_v3", "Standard_F1s", "Standard_F2s", "Standard_F4s", "Standard_F8s", "Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2" ],
      "defaultValue": "Standard_DS1_v2"
    },
    "enableREST": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "no"
    },
    "enableAccelerated": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "no"
    },
    "ccManaged": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "no"
    },
    "ccClusterName": {
      "type": "string",
      "defaultValue": ""
    },
    "ccRangeId": {
      "type": "string",
      "defaultValue": ""
    },
    "ccIpAddress": {
      "type": "string",
      "defaultValue": ""
    },
    "ccSecret": {
      "type": "securestring",
      "defaultValue": ""
    },
    "diagstorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "diagnostic Storage Account type"
      }
    }
  },
  "variables": {
    "computeApiVersion": "2017-03-30",
    "networkApiVersion": "2017-08-01",
    "bloburi" : "[if(equals(contains(resourceGroup().location,'usgov'),'True'),'.blob.core.usgovcloudapi.net','.blob.core.windows.net')]",

    "imagePublisher": "barracudanetworks",
    "imageOffer": "barracuda-ng-firewall",

    "nsgName": "[concat(parameters('prefix'),'-NSG-CGF')]",
    "avName": "[concat(parameters('prefix'),'-AV-CGF')]",
    "vnetID": "[resourceId(parameters('vNetResourceGroup'),'Microsoft.Network/virtualNetworks',parameters('vNetName'))]",
    "subnetRefCGF": "[concat(variables('vnetID'),'/subnets/',parameters('subnetNameCGF'))]",

    "cgfVmName1": "[concat(parameters('prefix'),'-VM-CGF-A')]",
    "cgfVmName2": "[concat(parameters('prefix'),'-VM-CGF-B')]",
    "cgfNicName1": "[concat(variables('cgfVmName1'),'-NIC')]",
    "cgfNicName2": "[concat(variables('cgfVmName2'),'-NIC')]",
    "cgfPIPAddressName1": "[concat(variables('cgfVmName1'),'-PIP')]",
    "cgfPIPAddressName2": "[concat(variables('cgfVmName2'),'-PIP')]",
    "cgfPIPAddressType": "Static",
    "storageAccountName": "[toLower(substring(concat(parameters('prefix'), uniqueString(resourceGroup().id)),0,15))]",
    "lbPIPAddressName": "[concat(parameters('prefix'),'-CGF-LB-PIP')]",
    "dnsNameForCGF": "[toLower( concat( parameters('prefix'), '-cgf-', uniqueString(resourceGroup().id) ) )]",

    "lbName-external": "[concat(parameters('prefix'),'-ELB-CGF')]",
    "lbName-internal": "[concat(parameters('prefix'),'-ILB-CGF')]",
    "lbID-external": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName-external'))]",
    "lbID-internal": "[resourceId('Microsoft.Network/loadBalancers',variables('lbName-internal'))]",
    "lbPIPID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('lbPIPAddressName'))]",
    "lbFrontEndPoolID-external": "[concat(variables('lbID-external'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "lbFrontEndPoolID-internal": "[concat(variables('lbID-internal'),'/frontendIPConfigurations/loadBalancerFrontend')]",
    "lbBackEndPoolID-external": "[concat(variables('lbID-external'),'/backendAddressPools/loadBalancerBackend')]",
    "lbBackEndPoolID-internal": "[concat(variables('lbID-internal'),'/backendAddressPools/loadBalancerBackend')]",
    "lbProbeID-external": "[concat(variables('lbID-external'),'/probes/HAProbe')]",
    "lbProbeID-internal": "[concat(variables('lbID-internal'),'/probes/HAProbe')]",
    "lbIPAddress-internal": "[variables('InternalLBPrivateIP')]",

    "adminUsername": "notused",
    "singleQuotationMark": "'",

    "cgfSubnetSplit": "[split( parameters( 'subnetCGF' ), '/' )]",
    "cgfSubnetAddrSplit": "[split( variables( 'cgfSubnetSplit' )[0], '.' )]",
    "cgfSubnetMask": "[variables( 'cgfSubnetSplit' )[1]]",
    "cgfSubnetDefaultGw": "[concat( variables( 'cgfSubnetAddrSplit' )[0], '.', variables( 'cgfSubnetAddrSplit' )[1], '.', variables( 'cgfSubnetAddrSplit' )[2], '.', add( int( variables( 'cgfSubnetAddrSplit' )[3]), 1 ))]",
    "cgfVmAddress1": "[variables('PrimaryCGFPrivateIP')]",
    "cgfVmAddress2": "[variables('SecondaryCGFPrivateIP')]",

    "cgfCustomDataStart": "[concat('#!/bin/bash\n\n/opb/cloud-setmip ', variables('cgfVmAddress1'), ' ', variables( 'cgfSubnetMask' ), ' ', variables( 'cgfSubnetDefaultGw' ))]",
    "RESTenabled": "\n/opb/cloud-enable-rest\n",
    "VirtualServerName": "[if(equals(parameters('version'),'7.2.5013201'),concat('S1'),concat('CSC'))]",
    "cgfCustomDataEnd": "[concat( '\n', 'echo ', variables('singleQuotationMark'), parameters('adminPassword'), variables('singleQuotationMark'), ' | /opb/create-dha -s ', variables('VirtualServerName') ,' -c -o ', variables('cgfVmAddress2'), ' -g ', variables( 'cgfSubnetDefaultGw' ), '\n')]",
    "cgfCustomData1": "[if(equals(parameters('version'),'7.2.5013201'),Base64(concat(variables('cgfCustomDataStart'),variables('cgfCustomDataEnd'))),if(equals(parameters('enableREST'), 'yes'),Base64(concat(variables('cgfCustomDataStart'),variables('RESTenabled'),variables('cgfCustomDataEnd'))),Base64(concat(variables('cgfCustomDataStart'),variables('cgfCustomDataEnd')))))]",
    "cgfCustomData2": "[Base64('\n')]",
    "cgfCustomDataCC1": "[base64(concat('#!/bin/bash\n\n', 'echo \"*/2 * * * * root echo \\\"', parameters( 'ccSecret' ), '\\\" | /opt/phion/bin/getpar -a ', parameters('ccIpAddress'), ' -r ', parameters( 'ccRangeId' ), ' -c ', parameters( 'ccClusterName' ), ' -b ', variables( 'cgfVmName1' ), ' -d /opt/phion/update/box.par -s --verbosity 10 >> /tmp/getpar.log && /etc/rc.d/init.d/phion stop && /etc/rc.d/init.d/phion start && rm /etc/cron.d/getpar\" > /etc/cron.d/getpar\n'))]",
    "cgfCustomDataCC2": "[base64(concat('#!/bin/bash\n\n', 'echo \"*/2 * * * * root echo \\\"', parameters( 'ccSecret' ), '\\\" | /opt/phion/bin/getpar -a ', parameters('ccIpAddress'), ' -r ', parameters( 'ccRangeId' ), ' -c ', parameters( 'ccClusterName' ), ' -b ', variables( 'cgfVmName2' ), ' -d /opt/phion/update/box.par -s --verbosity 10 >> /tmp/getpar.log && /etc/rc.d/init.d/phion stop && /etc/rc.d/init.d/phion start && rm /etc/cron.d/getpar\" > /etc/cron.d/getpar\n'))]",

    "defaultRouteTableName": "[concat( 'route-via-', parameters( 'prefix' ), 'VM-CGF-', resourceGroup().name )]"
  },
    "resources": [
      {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[variables('storageAccountName')]",
        "location": "[resourceGroup().location]",
        "apiVersion": "2018-07-01",
        "sku": {
          "name": "[parameters('diagstorageAccountType')]"
        },
        "kind": "StorageV2",
        "properties": {}
      },
      {
        "apiVersion": "[variables('networkApiVersion')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "name": "[variables('nsgName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "securityRules": [
            {
              "name": "BlockInboundSSH",
              "properties": {
                "description": "Block inbound SSH",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "22",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Deny",
                "priority": 100,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowAnyInbound",
              "properties": {
                "description": "Allow Any",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 110,
                "direction": "Inbound"
              }
            },
            {
              "name": "AllowAnyOutbound",
              "properties": {
                "description": "Allow Any",
                "protocol": "*",
                "sourcePortRange": "*",
                "destinationPortRange": "*",
                "sourceAddressPrefix": "*",
                "destinationAddressPrefix": "*",
                "access": "Allow",
                "priority": 100,
                "direction": "Outbound"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "[variables( 'networkApiVersion' )]",
        "type": "Microsoft.Network/routeTables",
        "name": "[variables('defaultRouteTableName')]",
        "location": "[resourceGroup().location]",
        "properties": {
          "routes": [
            {
              "name": "[variables( 'defaultRouteTableName' )]",
              "properties": {
                "addressPrefix": "0.0.0.0/0",
                "nextHopType": "VirtualAppliance",
                "nextHopIpAddress": "[variables('lbIPAddress-internal')]"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "[variables('computeApiVersion')]",
        "type": "Microsoft.Compute/availabilitySets",
        "name": "[variables('avName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [],
        "properties": {
          "platformFaultDomainCount": 2,
          "platformUpdateDomainCount": 5
        },
        "sku": {
          "name": "Aligned"
        }
      },
      {
        "apiVersion": "[variables('networkApiVersion')]",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('lbPIPAddressName')]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "publicIPAllocationMethod": "[variables('cgfPIPAddressType')]",
          "dnsSettings": {
            "domainNameLabel": "[variables('dnsNameForCGF')]"
          }
        }
      },
      {
        "apiVersion": "[variables('networkApiVersion')]",
        "name": "[variables('lbName-external')]",
        "type": "Microsoft.Network/loadBalancers",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "comments": "External LoadBalancer for the Barracuda Next Gen Firewall F cluster",
        "tags": {
          "displayName": "CGFLB-External"
        },
        "dependsOn": [
          "[concat('Microsoft.Network/publicIPAddresses/', variables('lbPIPAddressName'))]"

        ],
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "loadBalancerFrontEnd",
              "properties": {
                "publicIPAddress": {
                  "id": "[variables('lbPIPID')]"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "loadBalancerBackend"
            }
          ],
          "loadBalancingRules": [
            {
              "name": "IPSEC-IKE",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('lbFrontEndPoolID-external')]"
                },
                "backendAddressPool": {
                  "id": "[variables('lbBackEndPoolID-external')]"
                },
                "protocol": "Udp",
                "frontendPort": 500,
                "backendPort": 500,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 5,
                "probe": {
                  "id": "[variables('lbProbeID-external')]"
                }
              }
            },
            {
              "name": "IPSEC-NATT",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('lbFrontEndPoolID-external')]"
                },
                "backendAddressPool": {
                  "id": "[variables('lbBackEndPoolID-external')]"
                },
                "protocol": "Udp",
                "frontendPort": 4500,
                "backendPort": 4500,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 5,
                "probe": {
                  "id": "[variables('lbProbeID-external')]"
                }
              }
            },
            {
              "name": "TINA-UDP",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('lbFrontEndPoolID-external')]"
                },
                "backendAddressPool": {
                  "id": "[variables('lbBackEndPoolID-external')]"
                },
                "protocol": "Udp",
                "frontendPort": 691,
                "backendPort": 691,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 5,
                "probe": {
                  "id": "[variables('lbProbeID-external')]"
                }
              }
            },
            {
              "name": "TINA-TCP",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('lbFrontEndPoolID-external')]"
                },
                "backendAddressPool": {
                  "id": "[variables('lbBackEndPoolID-external')]"
                },
                "protocol": "Tcp",
                "frontendPort": 691,
                "backendPort": 691,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 5,
                "probe": {
                  "id": "[variables('lbProbeID-external')]"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "HAProbe",
              "properties": {
                "protocol": "Tcp",
                "port": 65000,
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              }
            }
          ]
        }
      },
      {
        "apiVersion": "[variables('networkApiVersion')]",
        "name": "[variables('lbName-internal')]",
        "type": "Microsoft.Network/loadBalancers",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "dependsOn": [],
        "comments": "Internal LoadBalancer for the Barracuda Next Gen Firewall F cluster",
        "tags": {
          "displayName": "CGFLB-Internal"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "loadBalancerFrontEnd",
              "properties": {
                "privateIPAddress": "[variables('lbIPAddress-internal')]",
                "privateIPAllocationMethod": "Static",
                "subnet": {
                  "id": "[variables('subnetRefCGF')]"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "loadBalancerBackend"
            }
          ],
          "loadBalancingRules": [
            {
              "name": "lbrule",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('lbFrontEndPoolID-internal')]"
                },
                "frontendPort": 0,
                "backendPort": 0,
                "enableFloatingIP": false,
                "idleTimeoutInMinutes": 15,
                "protocol": "All",
                "loadDistribution": "Default",
                "backendAddressPool": {
                  "id": "[variables('lbBackEndPoolID-internal')]"
                },
                "probe": {
                  "id": "[variables('lbProbeID-internal')]"
                }
              }
            }
          ],
          "probes": [
            {
              "name": "HAProbe",
              "properties": {
                "protocol": "Tcp",
                "port": 65000,
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              }
            }
          ]
        }
      },
      {
        "apiVersion": "[variables('networkApiVersion')]",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('cgfPIPAddressName1')]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "publicIPAllocationMethod": "[variables('cgfPIPAddressType')]"
        }
      },
      {
        "apiVersion": "[variables('networkApiVersion')]",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('cgfPIPAddressName2')]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "publicIPAllocationMethod": "[variables('cgfPIPAddressType')]"
        }
      },
      {
        "apiVersion": "[variables('networkApiVersion')]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[variables('cgfNicName1')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/publicIPAddresses/', variables('cgfPIPAddressName1'))]",
          "[variables('lbID-external')]",
          "[variables('lbID-internal')]"
        ],
        "properties": {
          "enableIPForwarding": true,
          "enableAcceleratedNetworking": "[if(equals(parameters('enableAccelerated'), 'yes'), 'true', 'false')]",
          "networkSecurityGroup": {
            "id": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]"
          },

          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "[variables( 'cgfVmAddress1' )]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('cgfPIPAddressName1'))]"
                },
                "subnet": {
                  "id": "[variables('subnetRefCGF')]"
                },
                "loadBalancerBackendAddressPools": [
                  { "id": "[variables('lbBackEndPoolID-external')]" },
                  { "id": "[variables('lbBackEndPoolID-internal')]" }
                ]
              }
            }
          ]
        }
      },
      {
        "apiVersion": "[variables('networkApiVersion')]",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[variables('cgfNicName2')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
          "[concat('Microsoft.Network/publicIPAddresses/', variables('cgfPIPAddressName2'))]",
          "[variables('lbID-external')]",
          "[variables('lbID-internal')]"
        ],
        "properties": {
          "enableIPForwarding": true,
          "enableAcceleratedNetworking": "[if(equals(parameters('enableAccelerated'), 'yes'), 'true', 'false')]",
          "networkSecurityGroup": {
            "id": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]"
          },
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "[variables( 'cgfVmAddress2' )]",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('cgfPIPAddressName2'))]"
                },
                "subnet": {
                  "id": "[variables('subnetRefCGF')]"
                },
                "loadBalancerBackendAddressPools": [
                  { "id": "[variables('lbBackEndPoolID-external')]" },
                  { "id": "[variables('lbBackEndPoolID-internal')]" }
                ]
              }
            }
          ]
        }
      },
      {
        "apiVersion": "[variables('computeApiVersion')]",
        "type": "Microsoft.Compute/virtualMachines",
        "identity": {
          "type": "SystemAssigned"
        },
        "name": "[variables('cgfVmName1')]",
        "location": "[resourceGroup().location]",
        "plan": {
          "name": "[parameters('imageSKU')]",
          "Product": "[variables('imageOffer')]",
          "Publisher": "[variables('imagePublisher')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/networkInterfaces/', variables('cgfNicName1'))]",
          "[concat('Microsoft.Compute/availabilitySets/', variables('avName'))]"
        ],
        "properties": {
          "availabilitySet": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('avName'))]"
          },
          "hardwareProfile": {
            "vmSize": "[parameters('vmSize')]"
          },
          "osProfile": {
            "computerName": "[variables('cgfVmName1')]",
            "adminUsername": "[variables('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "customData": "[if(equals(parameters('ccManaged'), 'yes'), variables('cgfCustomDataCC1'), variables('cgfCustomData1'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('imagePublisher')]",
              "offer": "[variables('imageOffer')]",
              "sku": "[parameters('imageSKU')]",
              "version": "[parameters('version')]"
            },
            "osDisk": {
              "name": "[concat(variables('cgfVmName1'),'-osdisk')]",
              "caching": "ReadWrite",
              "createOption": "FromImage"
            }
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[concat('https://', variables('storageAccountName'), variables('bloburi'))]"
            }
            
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('cgfNicName1'))]",
                "properties": {
                  "primary": true
                }
              }
            ]
          }
        }
      },
      {
        "apiVersion": "[variables('computeApiVersion')]",
        "type": "Microsoft.Compute/virtualMachines",
        "identity": {
          "type": "SystemAssigned"
        },
        "name": "[variables('cgfVmName2')]",
        "location": "[resourceGroup().location]",
        "plan": {
          "name": "[parameters('imageSKU')]",
          "Product": "[variables('imageOffer')]",
          "Publisher": "[variables('imagePublisher')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Network/networkInterfaces/', variables('cgfNicName2'))]",
          "[concat('Microsoft.Compute/availabilitySets/', variables('avName'))]"
        ],
        "properties": {
          "availabilitySet": {
            "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('avName'))]"
          },
          "hardwareProfile": {
            "vmSize": "[parameters('vmSize')]"
          },
          "osProfile": {
            "computerName": "[variables('cgfVmName2')]",
            "adminUsername": "[variables('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]",
            "customData": "[if(equals(parameters('ccManaged'), 'yes'), variables('cgfCustomDataCC2'), variables('cgfCustomData2'))]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('imagePublisher')]",
              "offer": "[variables('imageOffer')]",
              "sku": "[parameters('imageSKU')]",
              "version": "[parameters('version')]"
            },
            "osDisk": {
              "name": "[concat(variables('cgfVmName2'),'-osdisk')]",
              "caching": "ReadWrite",
              "createOption": "FromImage"
            }
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[concat('https://', variables('storageAccountName'), '.blob.core.windows.net')]"
            }

          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('cgfNicName2'))]",
                "properties": {
                  "primary": true
                }
              }
            ]
          }
        }
      }
    ],
    "outputs": {
      "CGF-A": {
        "type": "string",
        "value": "[reference(variables('cgfPIPAddressName1')).ipAddress]"
      },
      "CGF-B": {
        "type": "string",
        "value": "[reference(variables('cgfPIPAddressName2')).ipAddress]"
      },
      "CGF-LB": {
        "type": "string",
        "value": "[reference(variables('lbPIPAddressName')).dnsSettings.fqdn]"
      }
    }
  }
